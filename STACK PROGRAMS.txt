#STACK IMPLEMENTATION
class stack:
    def __init__(self,size):   #constructor as obj1 is created
        self.size=size
        self.box=[0]*self.size  #stack created initially with all elements as 0 
        self.top=-1    #index of top initially = -1
        
    def push(self,data):
        if self.top+1 == self.size:   #self.top=3; 3+1=4; size of stack=3
            print("Overflow")
            return 
        self.top+=1
        self.box[self.top]=data    #data = 18,7,3
        
    def display(self):
        if self.top == -1:   #stack is empty
            print("Underflow")
            return
        for i in range(self.top,-1,-1):  #start from top till 0th index in reverse direction
            print(self.box[i],end=" ")
    
    def pop(self):
        if self.top == -1:
            print("Underflow")
            return
        self.top-=1
        
    def peek(self):
        if self.top == -1:
            print("Underflow")
            return
        print()
        print(self.box[self.top])
        
stack1=stack(3)   #object1  #size of stack=3
stack1.push(18)   #18 = data
stack1.push(7)
stack1.push(3)
stack1.push(34)   #stack will be overflow
stack1.display()  #display the data
stack1.peek() #display the top element
stack1.pop()
stack1.display()

----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------
#STACK USING PYTHON
class stack:
    def __init__(self):
        self.box=[]
    def push(self,data):
        self.box.append(data)
                               
    def display(self):
        if len(self.box)==0:
            print("empty")
            return
        for i in self.box[::-1]:
            print(i,end=" ")
            
    def pop(self):
        if len(self.box)==0:
            print("empty")
            return
        self.box.pop()
            
    def peek(self):
        if len(self.box) == 0:
            print("empty")
            return
        print(self.box[-1])
                 
stack1=stack()   #object1  #size of stack=3
stack1.push(18)   #18 = data
stack1.push(7)
stack1.push(3)
stack1.push(34)   #stack will be overflow
stack1.display()  #display the data
stack1.peek() #display the top element
stack1.pop()
stack1.display()   

--------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
#DOUBLE-ENDED QUEUE
class Queue:
    def __init__(self,size):
        self.size=size
        self.queue=[0]*self.size
        self.rear=self.front=-1
        
    def enqueue(self,data):
        if self.rear==-1:
            self.front=self.rear=0
            self.queue[self.rear]=data
            return
        if self.rear+1 == self.size:
            print("Is Full")
            return
        self.rear+=1
        self.queue[self.rear]=data
        
    def display(self):
        if self.front==-1 or self.front>self.rear:
            print("empty")
            return
        for i in range(self.front,self.rear+1):
            print(self.queue[i],end=" ")
            
    def dequeue(self):
        if self.front==-1 or self.front>self.rear:
            print("empty")
            return
        self.front+=1
        
    def front1(self):
        if self.front==-1 or self.front>self.rear:
            print("empty")
            return
        print(self.queue[self.front])
        
obj=Queue(3)
obj.enqueue(18)
obj.enqueue(7)
obj.display()
print()
obj.front1()

-------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------
#QUEUE USING PYTHON

class Queue:
    def __init__(self):
        self.queue = []

    def enqueue(self,data):
        self.queue.append(data)

    def display(self):
        if len(self.queue)==0:
            print("empty")
            return
        for i in self.queue:
            print(i,end=" ")

    def dequeue(self):
        if len(self.queue) == 0:
            print("empty")
            return
        self.queue.pop(0)

    def front(self):
        if len(self.queue) == 0:
            print("empty")
            return
        print(self.queue[0])

obj = Queue()
obj.enqueue(18)
obj.enqueue(7)
print("The queue is: ")
obj.display()
obj.dequeue()
print()
print("The queue after dequeue is: ")
obj.display()

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
#LINKEDLIST
class Node:
    def __init__(self,data): #create the nodes i.e., the boxes
        self.data=data  #stores the data value of the node
        self.next=None  #stores address

class linked_list:  #to link the nodes
    def __init__(self):
        self.head=None
        
    def b_insert(self,data):  #insert at the beginning
        newnode=Node(data)  #Node() is called because we need to have data in the form of a structure
        newnode.next=self.head
        self.head=newnode
        
    def e_insert(self,data):  #insert at the end
        newnode=Node(data)
        if self.head is None:
            self.head=newnode
            return
        cur=self.head
        while cur.next:
            cur=cur.next
        cur.next=newnode
    
    def display(self):
        if self.head is None:
            print("empty")
            return
        cur=self.head #if head is not empty, come here
        while cur: #if cur is present,come inside
            print(cur.data,end="->")
            cur=cur.next

obj=linked_list()
obj.b_insert(8)  #Node with data value as 8
obj.b_insert(10)
obj.b_insert(21)
obj.e_insert(36)
obj.display()
